/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package campominado;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Felipe
 */
public class MainUI extends javax.swing.JFrame implements ActionListener, MouseListener{

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        novoJogo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        file.setText("File");

        novoJogo.setText("Novo Jogo");
        novoJogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoJogoActionPerformed(evt);
            }
        });
        file.add(novoJogo);

        jMenuBar1.add(file);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static JPanel areaConfig;     //painel para a entrada do usuario
    private static JPanel areaJogo;       //painel com o campo minado em si
    private static JPanel areaHistorico;
    private static JButton[][] botoes;    //array guardando as celulas do campo
    private static Campo c;
    private static JLabel timer, minasR;
    private static JButton carinha;
    private static Timer t;
    int contador = 0;
    int condicaoVitoria = 0;
    boolean cheatLigado = false;
    Date date = null;
    //cria os paineis do jogo
    //cria os componentes do painel areaconfig para o usuario iniciar o jogo
    private void novoJogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoJogoActionPerformed
        JPanel area = new JPanel();       //painel geral
        areaJogo = new JPanel();          //painel com o campo minado em si
        JPanel areaMenu = new JPanel();   //painel para a entrada do usuario
        JPanel areaD = new JPanel();      //painel para exibir informaçoes(timer, bombas restantes) durante o jogo
        areaConfig = new JPanel();        //painel para a entrada do usuario
        JPanel areaCara = new JPanel();
        JPanel areaProgresso = new JPanel();
        JPanel areaT = new JPanel();
        areaHistorico = new JPanel();
        
        //colocando os JPanels/layouts em seus lugares e
        //..........................................................................
        this.setLayout(new FlowLayout(FlowLayout.LEADING, 5, 5));
        this.add(area);
        
        area.setLayout(new BorderLayout());
        area.add(areaMenu, BorderLayout.NORTH);
        area.add(areaJogo, BorderLayout.CENTER);
        area.add(areaHistorico, BorderLayout.SOUTH);
        
        areaJogo.setBorder(new LineBorder(Color.BLACK));
        
        areaMenu.setLayout(new BorderLayout());
        areaMenu.add(areaConfig, BorderLayout.NORTH);
        areaMenu.add(areaD, BorderLayout.SOUTH);
        
        areaD.setLayout(new BorderLayout());
        areaD.add(areaProgresso, BorderLayout.WEST);
        areaD.add(areaCara, BorderLayout.CENTER);
        areaD.add(areaT, BorderLayout.EAST);
        
        areaConfig.setLayout(new FlowLayout());
        
        areaProgresso.setLayout(new FlowLayout());
        
        areaCara.setLayout(new FlowLayout());
        
        areaT.setLayout(new FlowLayout());
        
        areaHistorico.setLayout(new BoxLayout(areaHistorico, BoxLayout.Y_AXIS));
        //..........................................................................
        
        //lidando com os JLabels
        //..........................................................................
        JLabel linhas, colunas, minas, hist;
        linhas = new JLabel("Linhas:");
        colunas = new JLabel("Colunas:");
        minas = new JLabel("Minas:");
        hist = new JLabel("Historico:");
        timer = new JLabel("000");
        timer.setBorder(new LineBorder(Color.BLACK));
        timer.setBackground(Color.BLACK);
        timer.setOpaque(true);
        timer.setFont(new Font("Serif", Font.BOLD, 18));
        timer.setForeground(Color.red);
        minasR = new JLabel("Minas: 0");
        
        Image cara = null;
        try {
            cara = ImageIO.read(new FileInputStream("imgs/faceidle.png"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        carinha = new JButton();
        carinha.setActionCommand("Cara");
        carinha.setIcon(new ImageIcon(cara));
        carinha.setMargin(new Insets(0, 0, 0, 0));
        carinha.setBorder( new LineBorder(Color.BLACK) );
        carinha.addActionListener(this);
        //..........................................................................
        
        JTextField lin, col, min;
        lin = new JTextField(3);
        col = new JTextField(3);
        min = new JTextField(3);
        lin.setText("15");
        col.setText("15");
        min.setText("5");
        
        JButton ok = new JButton("Iniciar");
        ok.addActionListener(this);
        
        //colocando os componentes em seus lugares
        //..........................................................................
        areaConfig.add(linhas);
        areaConfig.add(lin);
        areaConfig.add(colunas);
        areaConfig.add(col);
        areaConfig.add(minas);
        areaConfig.add(min);
        areaConfig.add(ok);
        
        areaProgresso.add(minasR);
        
        areaCara.add(carinha);
        
        areaT.add(timer);
        
        areaHistorico.add(hist);
        //..........................................................................
        
        this.pack();
        this.revalidate();
        this.repaint();
        System.out.println("teste");
    }//GEN-LAST:event_novoJogoActionPerformed
    
    public int[] pegaEntradas() {
        int[] entradas = new int[3];
        int i = 0;

        for(Component cp : areaConfig.getComponents()) {
            if(cp.getClass().getName().equals(new JTextField().getClass().getName())) {
                JTextField jtf = (JTextField) cp;
                entradas[i] = Integer.parseInt(jtf.getText());
                i++;
            }
        }
        return entradas;
    }
    //cria a representação grafica do campo minado quando clicam em Iniciar
    //executa toda a logica de como o campo funciona quado as celulas sao clicadas
    @Override
    public void actionPerformed(ActionEvent evt) {
        int[] entradas = pegaEntradas();
        
        switch (evt.getActionCommand()) {
            case "Iniciar":
                try {
                    criaCelulas(entradas[0], entradas[1], entradas[2]);
                } catch (IOException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                }   t = new Timer(1000, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        timer.setText(String.valueOf(contador));
                        contador++;
                    }
                }); 
                date = new Date();
                t.start();
                condicaoVitoria = (entradas[0]*entradas[1])-entradas[2];
                minasR.setText("Minas: "+entradas[2]);
                break;

            case "Cara":
                Quadrado[][] q = c.getQuadrados();
                if(cheatLigado) {
                    Image celula = null;
                    try {
                        celula = ImageIO.read(new FileInputStream("imgs/closedcell.png"));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for(int i = 0; i < entradas[0]; i++) {
                        for(int j = 0; j < entradas[1]; j++) {
                            if(q[i][j].isTemM()) {
                                botoes[i][j].setIcon(new ImageIcon(celula));
                            }
                        }
                    }
                    cheatLigado = false;
                }else if(!cheatLigado) {
                    Image bomba = null;
                    try {
                        bomba = ImageIO.read(new FileInputStream("imgs/bomb.png"));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for(int i = 0; i < entradas[0]; i++) {
                        for(int j = 0; j < entradas[1]; j++) {
                            if(q[i][j].isTemM()) {
                                botoes[i][j].setIcon(new ImageIcon(bomba));
                            }
                        }
                    }
                    cheatLigado = true;
                }   
                break;

//            default:
//                JButton jb = (JButton) evt.getSource();
//                abreCelulas(jb, entradas);
//                break;
        }

        System.out.println("teste2");
    }
    
    
    @Override
    public void mouseClicked(MouseEvent m) {
        int[] entradas = pegaEntradas();
        
        JButton jb = (JButton) m.getSource();
        
        String[] s = jb.getName().split("_");
            
        int posL = Integer.parseInt(s[0]);
        int posC = Integer.parseInt(s[1]);

        Quadrado[][] allQuad = c.getQuadrados();
        Quadrado quad = allQuad[posL][posC];

        if(m.getButton() == 3) {
            Image bandeira = null;
            Image cel = null;
            
            try {
                bandeira = ImageIO.read(new FileInputStream("imgs/bandeiras.png"));
                cel = ImageIO.read(new FileInputStream("imgs/closedcell.png"));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(!quad.isBandeira()) {
                botoes[posL][posC].setIcon(new ImageIcon(bandeira));
                quad.setBandeira(true);
            }else {
                botoes[posL][posC].setIcon(new ImageIcon(cel));
                quad.setBandeira(false);
            }
        }
        else if(m.getButton() == 1 && m.getButton() == 3) {
            abreCelulas(botoes[posL-1][posC-1], entradas);
            abreCelulas(botoes[posL-1][posC], entradas);
            abreCelulas(botoes[posL-1][posC+1], entradas);
            abreCelulas(botoes[posL][posC+1], entradas);
            abreCelulas(botoes[posL+1][posC+1], entradas);
            abreCelulas(botoes[posL+1][posC], entradas);
            abreCelulas(botoes[posL+1][posC-1], entradas);
            abreCelulas(botoes[posL][posC-1], entradas);
        }
        else if(m.getButton() == 1){
            abreCelulas(jb, entradas);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu file;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem novoJogo;
    // End of variables declaration//GEN-END:variables

    private void criaCelulas(int linhas, int colunas, int minas) throws IOException {
        c = new Campo(linhas, colunas, minas);
        
        areaJogo.setLayout(new GridLayout(linhas, colunas, 0, 0));
        
        botoes = new JButton[linhas][colunas];
        
        Image cel = ImageIO.read(new FileInputStream("imgs/closedcell.png"));
        
        for(int i = 0; i < linhas; i++) {
            for(int j = 0; j < colunas; j++) {
                botoes[i][j] = new JButton();
                botoes[i][j].setName(i+"_"+j);
                botoes[i][j].addActionListener(this);
                botoes[i][j].addMouseListener(this);
                botoes[i][j].setIcon(new ImageIcon(cel));
                botoes[i][j].setMargin(new Insets(0, 0, 0, 0));
                botoes[i][j].setBorder( new LineBorder(Color.BLACK) );
                areaJogo.add(botoes[i][j]);
            }
        }
        //areaJogo.setSize(400, 400);
        this.pack();
        this.revalidate();
        this.repaint();
    }
    
    private void abreCelulas(JButton jb, int[] entradas) {
            
            String[] s = jb.getName().split("_");
            
            int posL = Integer.parseInt(s[0]);
            int posC = Integer.parseInt(s[1]);
            
            Quadrado[][] allQuad = c.getQuadrados();
            Quadrado quad = allQuad[posL][posC];
            if(quad.isRevelado()) {
                //faz nada
            }
            else if(quad.isTemM() && !quad.isBandeira()) {
                Image bom = null;
                Image exp = null;
                try {
                    bom = ImageIO.read(new FileInputStream("imgs/bomb.png"));
                    exp = ImageIO.read(new FileInputStream("imgs/explosao.png"));
                } catch (IOException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                for(int i = 0; i < entradas[0]; i++) {
                    for(int j = 0; j < entradas[1]; j++) {
                        if(allQuad[i][j].isTemM()) {
                            botoes[i][j].setIcon(new ImageIcon(bom));
                        }
                    }
                }
                botoes[posL][posC].setIcon(new ImageIcon(exp));
                try {
                    fimDeJogo(false, entradas);
                } catch (IOException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else{
                condicaoVitoria--;
                if(quad.getNumero()>0 && !quad.isBandeira()) {
                    Image num = null;
                    try {
                        num = ImageIO.read(new FileInputStream("imgs/"+quad.getNumero()+".png"));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    botoes[posL][posC].setIcon(new ImageIcon(num));
                    quad.setRevelado(true);
                }
                else if(quad.getNumero()==0 && !quad.isBandeira()) {
                    Image celVazia = null;                    
                    try {
                        celVazia = ImageIO.read(new FileInputStream("imgs/openemptycell.png"));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    botoes[posL][posC].setIcon(new ImageIcon(celVazia));
                    quad.setRevelado(true);
                    
                    if(posL==0 && posC==0){
                       abreCelulas(botoes[posL+1][posC+1], entradas);
                       abreCelulas(botoes[posL+1][posC], entradas);
                       abreCelulas(botoes[posL][posC+1], entradas);
                    }else if(posL==0 && (posC>0 && posC<c.getColunas()-1)) {
                        abreCelulas(botoes[posL][posC-1], entradas);
                        abreCelulas(botoes[posL+1][posC-1], entradas);
                        abreCelulas(botoes[posL+1][posC], entradas);
                        abreCelulas(botoes[posL+1][posC+1], entradas);
                        abreCelulas(botoes[posL][posC+1], entradas);
                    }else if(posL==0 && posC==c.getColunas()-1){
                        abreCelulas(botoes[posL][posC-1], entradas);
                        abreCelulas(botoes[posL+1][posC], entradas);
                        abreCelulas(botoes[posL+1][posC-1], entradas);
                    }else if((posL>0 && posL<c.getLinhas()-1) && posC==c.getColunas()-1) {
                        abreCelulas(botoes[posL-1][posC], entradas);
                        abreCelulas(botoes[posL-1][posC-1], entradas);
                        abreCelulas(botoes[posL][posC-1], entradas);
                        abreCelulas(botoes[posL+1][posC-1], entradas);
                        abreCelulas(botoes[posL+1][posC], entradas);
                    }else if(posL==c.getLinhas()-1 && posC==c.getColunas()-1) {
                        abreCelulas(botoes[posL-1][posC], entradas);
                        abreCelulas(botoes[posL-1][posC-1], entradas);
                        abreCelulas(botoes[posL][posC-1], entradas);
                    }else if(posL==c.getLinhas()-1 && (posC>0 && posC<c.getColunas()-1)) {
                        abreCelulas(botoes[posL][posC-1], entradas);
                        abreCelulas(botoes[posL-1][posC-1], entradas);
                        abreCelulas(botoes[posL-1][posC], entradas);
                        abreCelulas(botoes[posL-1][posC+1], entradas);
                        abreCelulas(botoes[posL][posC+1], entradas);
                    }else if(posL==c.getLinhas()-1 && posC==0) {
                        abreCelulas(botoes[posL-1][posC], entradas);
                        abreCelulas(botoes[posL-1][posC+1], entradas);
                        abreCelulas(botoes[posL][posC+1], entradas);
                    }else if((posL>0 && posL<c.getLinhas()) && posC==0) {
                        abreCelulas(botoes[posL-1][posC], entradas);
                        abreCelulas(botoes[posL-1][posC+1], entradas);
                        abreCelulas(botoes[posL][posC+1], entradas);
                        abreCelulas(botoes[posL+1][posC+1], entradas);
                        abreCelulas(botoes[posL+1][posC], entradas);
                    }else {
                        abreCelulas(botoes[posL-1][posC-1], entradas);
                        abreCelulas(botoes[posL-1][posC], entradas);
                        abreCelulas(botoes[posL-1][posC+1], entradas);
                        abreCelulas(botoes[posL][posC+1], entradas);
                        abreCelulas(botoes[posL+1][posC+1], entradas);
                        abreCelulas(botoes[posL+1][posC], entradas);
                        abreCelulas(botoes[posL+1][posC-1], entradas);
                        abreCelulas(botoes[posL][posC-1], entradas);
                    }
                }
                if(condicaoVitoria==0) {
                    try {
                        fimDeJogo(true, entradas);
                    } catch (IOException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
    }

    private void fimDeJogo(boolean vitoria, int[] entradas) throws IOException {
        Image cara = null;
        cara = ImageIO.read(new FileInputStream("imgs/faceidle.png"));
        
        t.stop();
        
        if(vitoria) {
            adicionaHistorico(entradas, true);
            
            Image caraV = null;
            caraV = ImageIO.read(new FileInputStream("imgs/facewin.png"));
            carinha.setIcon(new ImageIcon(caraV));
            JOptionPane.showMessageDialog(this, "Você venceu!", "=D", JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            adicionaHistorico(entradas, false);
            Image caraMorto = null;
            caraMorto = ImageIO.read(new FileInputStream("imgs/facedead.png"));
            carinha.setIcon(new ImageIcon(caraMorto));
            JOptionPane.showMessageDialog(this, "Você perdeu!", "T.T", JOptionPane.INFORMATION_MESSAGE);
        }
        
        areaJogo.removeAll();
        carinha.setIcon(new ImageIcon(cara));
        minasR.setText("Minas: 0");
        timer.setText("000");
        this.pack();
        this.revalidate();
        this.repaint();
    }

    private void adicionaHistorico(int[] entradas, boolean vitoria) {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        date = new Date();
        
        if(vitoria) {
            JLabel label = new JLabel(df.format(date) + "  |  Dimensão: " + entradas[0] + "x" + entradas[1] + "  |  Minas: " + entradas[2] + "  |  Duração: " + contador + "  |  Vitoria");
            areaHistorico.add(label);
        }else {
            JLabel label = new JLabel(df.format(date) + "  |  Dimensão: " + entradas[0] + "x" + entradas[1] + "  |  Minas: " + entradas[2] + "  |  Duração: " + contador + "  |  Derrota");
            areaHistorico.add(label);
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //System.out.println("faz nada1");
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //System.out.println("faz nada2");
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //System.out.println("faz nada3");
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //System.out.println("faz nada4");
    }
}
/* to do:
-bandeira
-historico
*/